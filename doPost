function doPost(e) {
  const update = JSON.parse(e.postData.contents);
  let msg_data = {}
  if (update.hasOwnProperty('message')) {
    msg_data = {
      id         : update.message.message_id,
      chat_id    : update.message.chat.id,
      user_name  : update.message.from.username,
      first_name : update.message.from.first_name,
      text       : update.message.text,
      command    : update.message.text.split(" ")[0],
      date       : update.message.date/86400+25569.125,
      is_msg     : true
    } 
    if (update.message.hasOwnProperty('forward_from')) {
      msg_data.forward_user_name  = update.message.forward_from.username;
      msg_data.forward_first_name = update.message.forward_from.first_name;
      msg_data.is_forward         = true
 
    }
    if (update.message.hasOwnProperty('reply_to_message')) {
      msg_data.reply_id          = update.message.reply_to_message.message_id;
      msg_data.reply_text        = update.message.reply_to_message.text;
      msg_data.reply_date        = update.message.reply_to_message.date;
      msg_data.reply_user_name   = update.message.reply_to_message.from.username;
      msg_data.reply_first_name  = update.message.reply_to_message.from.first_name;
      msg_data.is_reply          =  true
    }
  }

  if (update.hasOwnProperty('edited_message')) {
    msg_data = {
      id         : update.edited_message.message_id,
      chat_id    : update.edited_message.chat.id,
      user_name  : update.edited_message.from.username,
      first_name : update.edited_message.from.first_name,
      text       : update.edited_message.text,
      command    : update.edited_message.text.split(" ")[0],
      date       : update.edited_message.date/86400+25569.125,
      is_edited  : true
    } 
  }

  if (update.hasOwnProperty('callback_query')) {
    msg_data = {
      id        : update.callback_query.message.message_id,
      chat_id   : update.callback_query.message.chat.id,
      user_name : update.callback_query.from.username,
      firstName : update.callback_query.from.first_name,
      text      : update.callback_query.message.text,
      command   : update.callback_query.message.text.split('\n')[0],
      date      : update.callback_query.message.date/86400+25569.125,
      vote      : update.callback_query.data,
      is_button : true
    }

  }
  
  
var accessDenied = true;
var data = JSON.parse(e.postData.contents);
var message = data.message;
var chat_id = data.message.chat.id;
var username = data.message.from.username;
var date = data.message.date;
if (message && message.text) {
var command = message.text;
    
      
if (data.message.text == "/start") {
writeUserData(username, chat_id, date);
}

var range = subscribeList.getRange("A2:a"); // Диапазон CHATID пользователей с доступом к боту
var data = range.getValues();

var accessDenied = true;

for (var i = 0; i < data.length; i++) {
  var chatId = data[i][0];

  if (chat_id == chatId) {
    accessDenied = false;

    if (command.startsWith("/")) {
      handleCommand(command, chat_id);
    } else {
      recordBirthday(command, chat_id);
    }

    // Завершение цикла, если найдено совпадение
    break;
  }
}

// Проверка флага доступа и отправка сообщения "В доступе отказано"
if (accessDenied) {
  var Xmessage = "⛔️ В доступе отказано. \n\nПриносим наши извинения, но вы не обладаете необходимыми правами для взаимодействия с данным ботом.";
  sendMessage(chat_id, Xmessage);
}
